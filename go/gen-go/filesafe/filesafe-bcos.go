// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package filesafe

import(
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type StatusCode int64
const (
  StatusCode_SUCCESS StatusCode = 0
  StatusCode_EXCEPTION StatusCode = 1
)

func (p StatusCode) String() string {
  switch p {
  case StatusCode_SUCCESS: return "SUCCESS"
  case StatusCode_EXCEPTION: return "EXCEPTION"
  }
  return "<UNSET>"
}

func StatusCodeFromString(s string) (StatusCode, error) {
  switch s {
  case "SUCCESS": return StatusCode_SUCCESS, nil 
  case "EXCEPTION": return StatusCode_EXCEPTION, nil 
  }
  return StatusCode(0), fmt.Errorf("not a valid StatusCode string")
}


func StatusCodePtr(v StatusCode) *StatusCode { return &v }

func (p StatusCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *StatusCode) UnmarshalText(text []byte) error {
q, err := StatusCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *StatusCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = StatusCode(v)
return nil
}

func (p * StatusCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type JsonString string

func JsonStringPtr(v JsonString) *JsonString { return &v }

// Attributes:
//  - UserID
type SearchFileReq struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
}

func NewSearchFileReq() *SearchFileReq {
  return &SearchFileReq{}
}


func (p *SearchFileReq) GetUserID() string {
  return p.UserID
}
func (p *SearchFileReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchFileReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *SearchFileReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SearchFileReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchFileReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *SearchFileReq) Equals(other *SearchFileReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserID != other.UserID { return false }
  return true
}

func (p *SearchFileReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchFileReq(%+v)", *p)
}

// Attributes:
//  - StatusCode
//  - Message
//  - FileList
type SearchFileRes struct {
  StatusCode StatusCode `thrift:"status_code,1" db:"status_code" json:"status_code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
  // unused fields # 3 to 9
  FileList JsonString `thrift:"file_list,10" db:"file_list" json:"file_list"`
}

func NewSearchFileRes() *SearchFileRes {
  return &SearchFileRes{}
}


func (p *SearchFileRes) GetStatusCode() StatusCode {
  return p.StatusCode
}

func (p *SearchFileRes) GetMessage() string {
  return p.Message
}

func (p *SearchFileRes) GetFileList() JsonString {
  return p.FileList
}
func (p *SearchFileRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchFileRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := StatusCode(v)
  p.StatusCode = temp
}
  return nil
}

func (p *SearchFileRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *SearchFileRes)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := JsonString(v)
  p.FileList = temp
}
  return nil
}

func (p *SearchFileRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SearchFileRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchFileRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status_code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.StatusCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status_code: ", p), err) }
  return err
}

func (p *SearchFileRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *SearchFileRes) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "file_list", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:file_list: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FileList)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.file_list (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:file_list: ", p), err) }
  return err
}

func (p *SearchFileRes) Equals(other *SearchFileRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StatusCode != other.StatusCode { return false }
  if p.Message != other.Message { return false }
  if p.FileList != other.FileList { return false }
  return true
}

func (p *SearchFileRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchFileRes(%+v)", *p)
}

// Attributes:
//  - UserID
//  - FilePath
//  - Digest
type CheckFileReq struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
  // unused fields # 2 to 9
  FilePath string `thrift:"file_path,10" db:"file_path" json:"file_path"`
  // unused fields # 11 to 19
  Digest string `thrift:"digest,20" db:"digest" json:"digest"`
}

func NewCheckFileReq() *CheckFileReq {
  return &CheckFileReq{}
}


func (p *CheckFileReq) GetUserID() string {
  return p.UserID
}

func (p *CheckFileReq) GetFilePath() string {
  return p.FilePath
}

func (p *CheckFileReq) GetDigest() string {
  return p.Digest
}
func (p *CheckFileReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CheckFileReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *CheckFileReq)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.FilePath = v
}
  return nil
}

func (p *CheckFileReq)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Digest = v
}
  return nil
}

func (p *CheckFileReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CheckFileReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CheckFileReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *CheckFileReq) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "file_path", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:file_path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FilePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.file_path (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:file_path: ", p), err) }
  return err
}

func (p *CheckFileReq) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "digest", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:digest: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Digest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.digest (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:digest: ", p), err) }
  return err
}

func (p *CheckFileReq) Equals(other *CheckFileReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserID != other.UserID { return false }
  if p.FilePath != other.FilePath { return false }
  if p.Digest != other.Digest { return false }
  return true
}

func (p *CheckFileReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckFileReq(%+v)", *p)
}

// Attributes:
//  - StatusCode
//  - Message
type CheckFileRes struct {
  StatusCode StatusCode `thrift:"status_code,1" db:"status_code" json:"status_code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewCheckFileRes() *CheckFileRes {
  return &CheckFileRes{}
}


func (p *CheckFileRes) GetStatusCode() StatusCode {
  return p.StatusCode
}

func (p *CheckFileRes) GetMessage() string {
  return p.Message
}
func (p *CheckFileRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CheckFileRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := StatusCode(v)
  p.StatusCode = temp
}
  return nil
}

func (p *CheckFileRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *CheckFileRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CheckFileRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CheckFileRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status_code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.StatusCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status_code: ", p), err) }
  return err
}

func (p *CheckFileRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *CheckFileRes) Equals(other *CheckFileRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StatusCode != other.StatusCode { return false }
  if p.Message != other.Message { return false }
  return true
}

func (p *CheckFileRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckFileRes(%+v)", *p)
}

// Attributes:
//  - UserID
//  - FilePath
//  - Digest
//  - Buff
type AddFileReq struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
  // unused fields # 2 to 9
  FilePath string `thrift:"file_path,10" db:"file_path" json:"file_path"`
  // unused fields # 11 to 19
  Digest string `thrift:"digest,20" db:"digest" json:"digest"`
  // unused fields # 21 to 29
  Buff []byte `thrift:"buff,30" db:"buff" json:"buff"`
}

func NewAddFileReq() *AddFileReq {
  return &AddFileReq{}
}


func (p *AddFileReq) GetUserID() string {
  return p.UserID
}

func (p *AddFileReq) GetFilePath() string {
  return p.FilePath
}

func (p *AddFileReq) GetDigest() string {
  return p.Digest
}

func (p *AddFileReq) GetBuff() []byte {
  return p.Buff
}
func (p *AddFileReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddFileReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *AddFileReq)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.FilePath = v
}
  return nil
}

func (p *AddFileReq)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Digest = v
}
  return nil
}

func (p *AddFileReq)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.Buff = v
}
  return nil
}

func (p *AddFileReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddFileReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddFileReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *AddFileReq) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "file_path", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:file_path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FilePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.file_path (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:file_path: ", p), err) }
  return err
}

func (p *AddFileReq) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "digest", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:digest: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Digest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.digest (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:digest: ", p), err) }
  return err
}

func (p *AddFileReq) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "buff", thrift.STRING, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:buff: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Buff); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buff (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:buff: ", p), err) }
  return err
}

func (p *AddFileReq) Equals(other *AddFileReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserID != other.UserID { return false }
  if p.FilePath != other.FilePath { return false }
  if p.Digest != other.Digest { return false }
  if bytes.Compare(p.Buff, other.Buff) != 0 { return false }
  return true
}

func (p *AddFileReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddFileReq(%+v)", *p)
}

// Attributes:
//  - StatusCode
//  - Message
type AddFileRes struct {
  StatusCode StatusCode `thrift:"status_code,1" db:"status_code" json:"status_code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewAddFileRes() *AddFileRes {
  return &AddFileRes{}
}


func (p *AddFileRes) GetStatusCode() StatusCode {
  return p.StatusCode
}

func (p *AddFileRes) GetMessage() string {
  return p.Message
}
func (p *AddFileRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddFileRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := StatusCode(v)
  p.StatusCode = temp
}
  return nil
}

func (p *AddFileRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *AddFileRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddFileRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddFileRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status_code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.StatusCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status_code: ", p), err) }
  return err
}

func (p *AddFileRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *AddFileRes) Equals(other *AddFileRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StatusCode != other.StatusCode { return false }
  if p.Message != other.Message { return false }
  return true
}

func (p *AddFileRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddFileRes(%+v)", *p)
}

// Attributes:
//  - UserID
//  - FilePath
//  - TargetPath
//  - Digest
type MoveFileReq struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
  // unused fields # 2 to 9
  FilePath string `thrift:"file_path,10" db:"file_path" json:"file_path"`
  // unused fields # 11 to 19
  TargetPath string `thrift:"target_path,20" db:"target_path" json:"target_path"`
  // unused fields # 21 to 29
  Digest string `thrift:"digest,30" db:"digest" json:"digest"`
}

func NewMoveFileReq() *MoveFileReq {
  return &MoveFileReq{}
}


func (p *MoveFileReq) GetUserID() string {
  return p.UserID
}

func (p *MoveFileReq) GetFilePath() string {
  return p.FilePath
}

func (p *MoveFileReq) GetTargetPath() string {
  return p.TargetPath
}

func (p *MoveFileReq) GetDigest() string {
  return p.Digest
}
func (p *MoveFileReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MoveFileReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *MoveFileReq)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.FilePath = v
}
  return nil
}

func (p *MoveFileReq)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.TargetPath = v
}
  return nil
}

func (p *MoveFileReq)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.Digest = v
}
  return nil
}

func (p *MoveFileReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MoveFileReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MoveFileReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *MoveFileReq) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "file_path", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:file_path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FilePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.file_path (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:file_path: ", p), err) }
  return err
}

func (p *MoveFileReq) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "target_path", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:target_path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TargetPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.target_path (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:target_path: ", p), err) }
  return err
}

func (p *MoveFileReq) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "digest", thrift.STRING, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:digest: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Digest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.digest (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:digest: ", p), err) }
  return err
}

func (p *MoveFileReq) Equals(other *MoveFileReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserID != other.UserID { return false }
  if p.FilePath != other.FilePath { return false }
  if p.TargetPath != other.TargetPath { return false }
  if p.Digest != other.Digest { return false }
  return true
}

func (p *MoveFileReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MoveFileReq(%+v)", *p)
}

// Attributes:
//  - StatusCode
//  - Message
type MoveFileRes struct {
  StatusCode StatusCode `thrift:"status_code,1" db:"status_code" json:"status_code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewMoveFileRes() *MoveFileRes {
  return &MoveFileRes{}
}


func (p *MoveFileRes) GetStatusCode() StatusCode {
  return p.StatusCode
}

func (p *MoveFileRes) GetMessage() string {
  return p.Message
}
func (p *MoveFileRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MoveFileRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := StatusCode(v)
  p.StatusCode = temp
}
  return nil
}

func (p *MoveFileRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *MoveFileRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MoveFileRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MoveFileRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status_code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.StatusCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status_code: ", p), err) }
  return err
}

func (p *MoveFileRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *MoveFileRes) Equals(other *MoveFileRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StatusCode != other.StatusCode { return false }
  if p.Message != other.Message { return false }
  return true
}

func (p *MoveFileRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MoveFileRes(%+v)", *p)
}

// Attributes:
//  - UserID
//  - FilePath
//  - Digest
type DeleteFileReq struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
  // unused fields # 2 to 9
  FilePath string `thrift:"file_path,10" db:"file_path" json:"file_path"`
  // unused fields # 11 to 19
  Digest string `thrift:"digest,20" db:"digest" json:"digest"`
}

func NewDeleteFileReq() *DeleteFileReq {
  return &DeleteFileReq{}
}


func (p *DeleteFileReq) GetUserID() string {
  return p.UserID
}

func (p *DeleteFileReq) GetFilePath() string {
  return p.FilePath
}

func (p *DeleteFileReq) GetDigest() string {
  return p.Digest
}
func (p *DeleteFileReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteFileReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *DeleteFileReq)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.FilePath = v
}
  return nil
}

func (p *DeleteFileReq)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Digest = v
}
  return nil
}

func (p *DeleteFileReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteFileReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteFileReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *DeleteFileReq) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "file_path", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:file_path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FilePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.file_path (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:file_path: ", p), err) }
  return err
}

func (p *DeleteFileReq) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "digest", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:digest: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Digest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.digest (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:digest: ", p), err) }
  return err
}

func (p *DeleteFileReq) Equals(other *DeleteFileReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserID != other.UserID { return false }
  if p.FilePath != other.FilePath { return false }
  if p.Digest != other.Digest { return false }
  return true
}

func (p *DeleteFileReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteFileReq(%+v)", *p)
}

// Attributes:
//  - StatusCode
//  - Message
type DeleteFileRes struct {
  StatusCode StatusCode `thrift:"status_code,1" db:"status_code" json:"status_code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewDeleteFileRes() *DeleteFileRes {
  return &DeleteFileRes{}
}


func (p *DeleteFileRes) GetStatusCode() StatusCode {
  return p.StatusCode
}

func (p *DeleteFileRes) GetMessage() string {
  return p.Message
}
func (p *DeleteFileRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteFileRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := StatusCode(v)
  p.StatusCode = temp
}
  return nil
}

func (p *DeleteFileRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *DeleteFileRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteFileRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteFileRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status_code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.StatusCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status_code: ", p), err) }
  return err
}

func (p *DeleteFileRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *DeleteFileRes) Equals(other *DeleteFileRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StatusCode != other.StatusCode { return false }
  if p.Message != other.Message { return false }
  return true
}

func (p *DeleteFileRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteFileRes(%+v)", *p)
}

// Attributes:
//  - UserID
//  - FilePath
//  - Digest
type RecoveryFileReq struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
  // unused fields # 2 to 9
  FilePath string `thrift:"file_path,10" db:"file_path" json:"file_path"`
  // unused fields # 11 to 19
  Digest string `thrift:"digest,20" db:"digest" json:"digest"`
}

func NewRecoveryFileReq() *RecoveryFileReq {
  return &RecoveryFileReq{}
}


func (p *RecoveryFileReq) GetUserID() string {
  return p.UserID
}

func (p *RecoveryFileReq) GetFilePath() string {
  return p.FilePath
}

func (p *RecoveryFileReq) GetDigest() string {
  return p.Digest
}
func (p *RecoveryFileReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecoveryFileReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *RecoveryFileReq)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.FilePath = v
}
  return nil
}

func (p *RecoveryFileReq)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Digest = v
}
  return nil
}

func (p *RecoveryFileReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RecoveryFileReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecoveryFileReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *RecoveryFileReq) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "file_path", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:file_path: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FilePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.file_path (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:file_path: ", p), err) }
  return err
}

func (p *RecoveryFileReq) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "digest", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:digest: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Digest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.digest (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:digest: ", p), err) }
  return err
}

func (p *RecoveryFileReq) Equals(other *RecoveryFileReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserID != other.UserID { return false }
  if p.FilePath != other.FilePath { return false }
  if p.Digest != other.Digest { return false }
  return true
}

func (p *RecoveryFileReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecoveryFileReq(%+v)", *p)
}

// Attributes:
//  - StatusCode
//  - Message
//  - Buff
type RecoveryFileRes struct {
  StatusCode StatusCode `thrift:"status_code,1" db:"status_code" json:"status_code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
  // unused fields # 3 to 9
  Buff []byte `thrift:"buff,10" db:"buff" json:"buff"`
}

func NewRecoveryFileRes() *RecoveryFileRes {
  return &RecoveryFileRes{}
}


func (p *RecoveryFileRes) GetStatusCode() StatusCode {
  return p.StatusCode
}

func (p *RecoveryFileRes) GetMessage() string {
  return p.Message
}

func (p *RecoveryFileRes) GetBuff() []byte {
  return p.Buff
}
func (p *RecoveryFileRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RecoveryFileRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := StatusCode(v)
  p.StatusCode = temp
}
  return nil
}

func (p *RecoveryFileRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *RecoveryFileRes)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Buff = v
}
  return nil
}

func (p *RecoveryFileRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RecoveryFileRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RecoveryFileRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status_code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.StatusCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status_code: ", p), err) }
  return err
}

func (p *RecoveryFileRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *RecoveryFileRes) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "buff", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:buff: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Buff); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buff (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:buff: ", p), err) }
  return err
}

func (p *RecoveryFileRes) Equals(other *RecoveryFileRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StatusCode != other.StatusCode { return false }
  if p.Message != other.Message { return false }
  if bytes.Compare(p.Buff, other.Buff) != 0 { return false }
  return true
}

func (p *RecoveryFileRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RecoveryFileRes(%+v)", *p)
}

type InternalService interface {
  // Parameters:
  //  - Req
  SearchFile(ctx context.Context, req *SearchFileReq) (r *SearchFileRes, err error)
  // Parameters:
  //  - Req
  CheckFile(ctx context.Context, req *CheckFileReq) (r *CheckFileRes, err error)
  // Parameters:
  //  - Req
  AddFile(ctx context.Context, req *AddFileReq) (r *AddFileRes, err error)
  // Parameters:
  //  - Req
  MoveFile(ctx context.Context, req *MoveFileReq) (r *MoveFileRes, err error)
  // Parameters:
  //  - Req
  DeleteFile(ctx context.Context, req *DeleteFileReq) (r *DeleteFileRes, err error)
  // Parameters:
  //  - Req
  RecoverFile(ctx context.Context, req *RecoveryFileReq) (r *RecoveryFileRes, err error)
}

type InternalServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewInternalServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *InternalServiceClient {
  return &InternalServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewInternalServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *InternalServiceClient {
  return &InternalServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewInternalServiceClient(c thrift.TClient) *InternalServiceClient {
  return &InternalServiceClient{
    c: c,
  }
}

func (p *InternalServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *InternalServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *InternalServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Req
func (p *InternalServiceClient) SearchFile(ctx context.Context, req *SearchFileReq) (r *SearchFileRes, err error) {
  var _args0 InternalServiceSearchFileArgs
  _args0.Req = req
  var _result1 InternalServiceSearchFileResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "search_file", &_args0, &_result1)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *InternalServiceClient) CheckFile(ctx context.Context, req *CheckFileReq) (r *CheckFileRes, err error) {
  var _args2 InternalServiceCheckFileArgs
  _args2.Req = req
  var _result3 InternalServiceCheckFileResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "check_file", &_args2, &_result3)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *InternalServiceClient) AddFile(ctx context.Context, req *AddFileReq) (r *AddFileRes, err error) {
  var _args4 InternalServiceAddFileArgs
  _args4.Req = req
  var _result5 InternalServiceAddFileResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "add_file", &_args4, &_result5)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *InternalServiceClient) MoveFile(ctx context.Context, req *MoveFileReq) (r *MoveFileRes, err error) {
  var _args6 InternalServiceMoveFileArgs
  _args6.Req = req
  var _result7 InternalServiceMoveFileResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "move_file", &_args6, &_result7)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *InternalServiceClient) DeleteFile(ctx context.Context, req *DeleteFileReq) (r *DeleteFileRes, err error) {
  var _args8 InternalServiceDeleteFileArgs
  _args8.Req = req
  var _result9 InternalServiceDeleteFileResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "delete_file", &_args8, &_result9)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *InternalServiceClient) RecoverFile(ctx context.Context, req *RecoveryFileReq) (r *RecoveryFileRes, err error) {
  var _args10 InternalServiceRecoverFileArgs
  _args10.Req = req
  var _result11 InternalServiceRecoverFileResult
  var meta thrift.ResponseMeta
  meta, err = p.Client_().Call(ctx, "recover_file", &_args10, &_result11)
  p.SetLastResponseMeta_(meta)
  if err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

type InternalServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler InternalService
}

func (p *InternalServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *InternalServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *InternalServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewInternalServiceProcessor(handler InternalService) *InternalServiceProcessor {

  self12 := &InternalServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["search_file"] = &internalServiceProcessorSearchFile{handler:handler}
  self12.processorMap["check_file"] = &internalServiceProcessorCheckFile{handler:handler}
  self12.processorMap["add_file"] = &internalServiceProcessorAddFile{handler:handler}
  self12.processorMap["move_file"] = &internalServiceProcessorMoveFile{handler:handler}
  self12.processorMap["delete_file"] = &internalServiceProcessorDeleteFile{handler:handler}
  self12.processorMap["recover_file"] = &internalServiceProcessorRecoverFile{handler:handler}
return self12
}

func (p *InternalServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x13.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x13

}

type internalServiceProcessorSearchFile struct {
  handler InternalService
}

func (p *internalServiceProcessorSearchFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := InternalServiceSearchFileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "search_file", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := InternalServiceSearchFileResult{}
  var retval *SearchFileRes
  if retval, err2 = p.handler.SearchFile(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing search_file: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "search_file", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "search_file", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type internalServiceProcessorCheckFile struct {
  handler InternalService
}

func (p *internalServiceProcessorCheckFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := InternalServiceCheckFileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "check_file", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := InternalServiceCheckFileResult{}
  var retval *CheckFileRes
  if retval, err2 = p.handler.CheckFile(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing check_file: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "check_file", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "check_file", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type internalServiceProcessorAddFile struct {
  handler InternalService
}

func (p *internalServiceProcessorAddFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := InternalServiceAddFileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add_file", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := InternalServiceAddFileResult{}
  var retval *AddFileRes
  if retval, err2 = p.handler.AddFile(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_file: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "add_file", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "add_file", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type internalServiceProcessorMoveFile struct {
  handler InternalService
}

func (p *internalServiceProcessorMoveFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := InternalServiceMoveFileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "move_file", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := InternalServiceMoveFileResult{}
  var retval *MoveFileRes
  if retval, err2 = p.handler.MoveFile(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing move_file: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "move_file", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "move_file", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type internalServiceProcessorDeleteFile struct {
  handler InternalService
}

func (p *internalServiceProcessorDeleteFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := InternalServiceDeleteFileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "delete_file", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := InternalServiceDeleteFileResult{}
  var retval *DeleteFileRes
  if retval, err2 = p.handler.DeleteFile(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_file: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "delete_file", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "delete_file", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type internalServiceProcessorRecoverFile struct {
  handler InternalService
}

func (p *internalServiceProcessorRecoverFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := InternalServiceRecoverFileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "recover_file", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := InternalServiceRecoverFileResult{}
  var retval *RecoveryFileRes
  if retval, err2 = p.handler.RecoverFile(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing recover_file: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "recover_file", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "recover_file", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type InternalServiceSearchFileArgs struct {
  Req *SearchFileReq `thrift:"req,1" db:"req" json:"req"`
}

func NewInternalServiceSearchFileArgs() *InternalServiceSearchFileArgs {
  return &InternalServiceSearchFileArgs{}
}

var InternalServiceSearchFileArgs_Req_DEFAULT *SearchFileReq
func (p *InternalServiceSearchFileArgs) GetReq() *SearchFileReq {
  if !p.IsSetReq() {
    return InternalServiceSearchFileArgs_Req_DEFAULT
  }
return p.Req
}
func (p *InternalServiceSearchFileArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *InternalServiceSearchFileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalServiceSearchFileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &SearchFileReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *InternalServiceSearchFileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "search_file_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalServiceSearchFileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *InternalServiceSearchFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalServiceSearchFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InternalServiceSearchFileResult struct {
  Success *SearchFileRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewInternalServiceSearchFileResult() *InternalServiceSearchFileResult {
  return &InternalServiceSearchFileResult{}
}

var InternalServiceSearchFileResult_Success_DEFAULT *SearchFileRes
func (p *InternalServiceSearchFileResult) GetSuccess() *SearchFileRes {
  if !p.IsSetSuccess() {
    return InternalServiceSearchFileResult_Success_DEFAULT
  }
return p.Success
}
func (p *InternalServiceSearchFileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *InternalServiceSearchFileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalServiceSearchFileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SearchFileRes{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *InternalServiceSearchFileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "search_file_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalServiceSearchFileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *InternalServiceSearchFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalServiceSearchFileResult(%+v)", *p)
}

// Attributes:
//  - Req
type InternalServiceCheckFileArgs struct {
  Req *CheckFileReq `thrift:"req,1" db:"req" json:"req"`
}

func NewInternalServiceCheckFileArgs() *InternalServiceCheckFileArgs {
  return &InternalServiceCheckFileArgs{}
}

var InternalServiceCheckFileArgs_Req_DEFAULT *CheckFileReq
func (p *InternalServiceCheckFileArgs) GetReq() *CheckFileReq {
  if !p.IsSetReq() {
    return InternalServiceCheckFileArgs_Req_DEFAULT
  }
return p.Req
}
func (p *InternalServiceCheckFileArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *InternalServiceCheckFileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalServiceCheckFileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CheckFileReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *InternalServiceCheckFileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "check_file_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalServiceCheckFileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *InternalServiceCheckFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalServiceCheckFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InternalServiceCheckFileResult struct {
  Success *CheckFileRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewInternalServiceCheckFileResult() *InternalServiceCheckFileResult {
  return &InternalServiceCheckFileResult{}
}

var InternalServiceCheckFileResult_Success_DEFAULT *CheckFileRes
func (p *InternalServiceCheckFileResult) GetSuccess() *CheckFileRes {
  if !p.IsSetSuccess() {
    return InternalServiceCheckFileResult_Success_DEFAULT
  }
return p.Success
}
func (p *InternalServiceCheckFileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *InternalServiceCheckFileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalServiceCheckFileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CheckFileRes{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *InternalServiceCheckFileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "check_file_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalServiceCheckFileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *InternalServiceCheckFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalServiceCheckFileResult(%+v)", *p)
}

// Attributes:
//  - Req
type InternalServiceAddFileArgs struct {
  Req *AddFileReq `thrift:"req,1" db:"req" json:"req"`
}

func NewInternalServiceAddFileArgs() *InternalServiceAddFileArgs {
  return &InternalServiceAddFileArgs{}
}

var InternalServiceAddFileArgs_Req_DEFAULT *AddFileReq
func (p *InternalServiceAddFileArgs) GetReq() *AddFileReq {
  if !p.IsSetReq() {
    return InternalServiceAddFileArgs_Req_DEFAULT
  }
return p.Req
}
func (p *InternalServiceAddFileArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *InternalServiceAddFileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalServiceAddFileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AddFileReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *InternalServiceAddFileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_file_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalServiceAddFileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *InternalServiceAddFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalServiceAddFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InternalServiceAddFileResult struct {
  Success *AddFileRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewInternalServiceAddFileResult() *InternalServiceAddFileResult {
  return &InternalServiceAddFileResult{}
}

var InternalServiceAddFileResult_Success_DEFAULT *AddFileRes
func (p *InternalServiceAddFileResult) GetSuccess() *AddFileRes {
  if !p.IsSetSuccess() {
    return InternalServiceAddFileResult_Success_DEFAULT
  }
return p.Success
}
func (p *InternalServiceAddFileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *InternalServiceAddFileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalServiceAddFileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AddFileRes{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *InternalServiceAddFileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_file_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalServiceAddFileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *InternalServiceAddFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalServiceAddFileResult(%+v)", *p)
}

// Attributes:
//  - Req
type InternalServiceMoveFileArgs struct {
  Req *MoveFileReq `thrift:"req,1" db:"req" json:"req"`
}

func NewInternalServiceMoveFileArgs() *InternalServiceMoveFileArgs {
  return &InternalServiceMoveFileArgs{}
}

var InternalServiceMoveFileArgs_Req_DEFAULT *MoveFileReq
func (p *InternalServiceMoveFileArgs) GetReq() *MoveFileReq {
  if !p.IsSetReq() {
    return InternalServiceMoveFileArgs_Req_DEFAULT
  }
return p.Req
}
func (p *InternalServiceMoveFileArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *InternalServiceMoveFileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalServiceMoveFileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &MoveFileReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *InternalServiceMoveFileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "move_file_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalServiceMoveFileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *InternalServiceMoveFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalServiceMoveFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InternalServiceMoveFileResult struct {
  Success *MoveFileRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewInternalServiceMoveFileResult() *InternalServiceMoveFileResult {
  return &InternalServiceMoveFileResult{}
}

var InternalServiceMoveFileResult_Success_DEFAULT *MoveFileRes
func (p *InternalServiceMoveFileResult) GetSuccess() *MoveFileRes {
  if !p.IsSetSuccess() {
    return InternalServiceMoveFileResult_Success_DEFAULT
  }
return p.Success
}
func (p *InternalServiceMoveFileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *InternalServiceMoveFileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalServiceMoveFileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &MoveFileRes{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *InternalServiceMoveFileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "move_file_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalServiceMoveFileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *InternalServiceMoveFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalServiceMoveFileResult(%+v)", *p)
}

// Attributes:
//  - Req
type InternalServiceDeleteFileArgs struct {
  Req *DeleteFileReq `thrift:"req,1" db:"req" json:"req"`
}

func NewInternalServiceDeleteFileArgs() *InternalServiceDeleteFileArgs {
  return &InternalServiceDeleteFileArgs{}
}

var InternalServiceDeleteFileArgs_Req_DEFAULT *DeleteFileReq
func (p *InternalServiceDeleteFileArgs) GetReq() *DeleteFileReq {
  if !p.IsSetReq() {
    return InternalServiceDeleteFileArgs_Req_DEFAULT
  }
return p.Req
}
func (p *InternalServiceDeleteFileArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *InternalServiceDeleteFileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalServiceDeleteFileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DeleteFileReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *InternalServiceDeleteFileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "delete_file_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalServiceDeleteFileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *InternalServiceDeleteFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalServiceDeleteFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InternalServiceDeleteFileResult struct {
  Success *DeleteFileRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewInternalServiceDeleteFileResult() *InternalServiceDeleteFileResult {
  return &InternalServiceDeleteFileResult{}
}

var InternalServiceDeleteFileResult_Success_DEFAULT *DeleteFileRes
func (p *InternalServiceDeleteFileResult) GetSuccess() *DeleteFileRes {
  if !p.IsSetSuccess() {
    return InternalServiceDeleteFileResult_Success_DEFAULT
  }
return p.Success
}
func (p *InternalServiceDeleteFileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *InternalServiceDeleteFileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalServiceDeleteFileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DeleteFileRes{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *InternalServiceDeleteFileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "delete_file_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalServiceDeleteFileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *InternalServiceDeleteFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalServiceDeleteFileResult(%+v)", *p)
}

// Attributes:
//  - Req
type InternalServiceRecoverFileArgs struct {
  Req *RecoveryFileReq `thrift:"req,1" db:"req" json:"req"`
}

func NewInternalServiceRecoverFileArgs() *InternalServiceRecoverFileArgs {
  return &InternalServiceRecoverFileArgs{}
}

var InternalServiceRecoverFileArgs_Req_DEFAULT *RecoveryFileReq
func (p *InternalServiceRecoverFileArgs) GetReq() *RecoveryFileReq {
  if !p.IsSetReq() {
    return InternalServiceRecoverFileArgs_Req_DEFAULT
  }
return p.Req
}
func (p *InternalServiceRecoverFileArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *InternalServiceRecoverFileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalServiceRecoverFileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &RecoveryFileReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *InternalServiceRecoverFileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "recover_file_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalServiceRecoverFileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *InternalServiceRecoverFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalServiceRecoverFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InternalServiceRecoverFileResult struct {
  Success *RecoveryFileRes `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewInternalServiceRecoverFileResult() *InternalServiceRecoverFileResult {
  return &InternalServiceRecoverFileResult{}
}

var InternalServiceRecoverFileResult_Success_DEFAULT *RecoveryFileRes
func (p *InternalServiceRecoverFileResult) GetSuccess() *RecoveryFileRes {
  if !p.IsSetSuccess() {
    return InternalServiceRecoverFileResult_Success_DEFAULT
  }
return p.Success
}
func (p *InternalServiceRecoverFileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *InternalServiceRecoverFileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalServiceRecoverFileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RecoveryFileRes{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *InternalServiceRecoverFileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "recover_file_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalServiceRecoverFileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *InternalServiceRecoverFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalServiceRecoverFileResult(%+v)", *p)
}


