/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package filesafe;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class AddFileReq implements org.apache.thrift.TBase<AddFileReq, AddFileReq._Fields>, java.io.Serializable, Cloneable, Comparable<AddFileReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddFileReq");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("file_path", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("digest", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField BUFF_FIELD_DESC = new org.apache.thrift.protocol.TField("buff", org.apache.thrift.protocol.TType.STRING, (short)30);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AddFileReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AddFileReqTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String user_id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String file_path; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String digest; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer buff; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "user_id"),
    FILE_PATH((short)10, "file_path"),
    DIGEST((short)20, "digest"),
    BUFF((short)30, "buff");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 10: // FILE_PATH
          return FILE_PATH;
        case 20: // DIGEST
          return DIGEST;
        case 30: // BUFF
          return BUFF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("file_path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIGEST, new org.apache.thrift.meta_data.FieldMetaData("digest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUFF, new org.apache.thrift.meta_data.FieldMetaData("buff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddFileReq.class, metaDataMap);
  }

  public AddFileReq() {
  }

  public AddFileReq(
    java.lang.String user_id,
    java.lang.String file_path,
    java.lang.String digest,
    java.nio.ByteBuffer buff)
  {
    this();
    this.user_id = user_id;
    this.file_path = file_path;
    this.digest = digest;
    this.buff = org.apache.thrift.TBaseHelper.copyBinary(buff);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AddFileReq(AddFileReq other) {
    if (other.isSetUser_id()) {
      this.user_id = other.user_id;
    }
    if (other.isSetFile_path()) {
      this.file_path = other.file_path;
    }
    if (other.isSetDigest()) {
      this.digest = other.digest;
    }
    if (other.isSetBuff()) {
      this.buff = org.apache.thrift.TBaseHelper.copyBinary(other.buff);
    }
  }

  public AddFileReq deepCopy() {
    return new AddFileReq(this);
  }

  @Override
  public void clear() {
    this.user_id = null;
    this.file_path = null;
    this.digest = null;
    this.buff = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser_id() {
    return this.user_id;
  }

  public AddFileReq setUser_id(@org.apache.thrift.annotation.Nullable java.lang.String user_id) {
    this.user_id = user_id;
    return this;
  }

  public void unsetUser_id() {
    this.user_id = null;
  }

  /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_id() {
    return this.user_id != null;
  }

  public void setUser_idIsSet(boolean value) {
    if (!value) {
      this.user_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFile_path() {
    return this.file_path;
  }

  public AddFileReq setFile_path(@org.apache.thrift.annotation.Nullable java.lang.String file_path) {
    this.file_path = file_path;
    return this;
  }

  public void unsetFile_path() {
    this.file_path = null;
  }

  /** Returns true if field file_path is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_path() {
    return this.file_path != null;
  }

  public void setFile_pathIsSet(boolean value) {
    if (!value) {
      this.file_path = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDigest() {
    return this.digest;
  }

  public AddFileReq setDigest(@org.apache.thrift.annotation.Nullable java.lang.String digest) {
    this.digest = digest;
    return this;
  }

  public void unsetDigest() {
    this.digest = null;
  }

  /** Returns true if field digest is set (has been assigned a value) and false otherwise */
  public boolean isSetDigest() {
    return this.digest != null;
  }

  public void setDigestIsSet(boolean value) {
    if (!value) {
      this.digest = null;
    }
  }

  public byte[] getBuff() {
    setBuff(org.apache.thrift.TBaseHelper.rightSize(buff));
    return buff == null ? null : buff.array();
  }

  public java.nio.ByteBuffer bufferForBuff() {
    return org.apache.thrift.TBaseHelper.copyBinary(buff);
  }

  public AddFileReq setBuff(byte[] buff) {
    this.buff = buff == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(buff.clone());
    return this;
  }

  public AddFileReq setBuff(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer buff) {
    this.buff = org.apache.thrift.TBaseHelper.copyBinary(buff);
    return this;
  }

  public void unsetBuff() {
    this.buff = null;
  }

  /** Returns true if field buff is set (has been assigned a value) and false otherwise */
  public boolean isSetBuff() {
    return this.buff != null;
  }

  public void setBuffIsSet(boolean value) {
    if (!value) {
      this.buff = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUser_id();
      } else {
        setUser_id((java.lang.String)value);
      }
      break;

    case FILE_PATH:
      if (value == null) {
        unsetFile_path();
      } else {
        setFile_path((java.lang.String)value);
      }
      break;

    case DIGEST:
      if (value == null) {
        unsetDigest();
      } else {
        setDigest((java.lang.String)value);
      }
      break;

    case BUFF:
      if (value == null) {
        unsetBuff();
      } else {
        if (value instanceof byte[]) {
          setBuff((byte[])value);
        } else {
          setBuff((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUser_id();

    case FILE_PATH:
      return getFile_path();

    case DIGEST:
      return getDigest();

    case BUFF:
      return getBuff();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUser_id();
    case FILE_PATH:
      return isSetFile_path();
    case DIGEST:
      return isSetDigest();
    case BUFF:
      return isSetBuff();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof AddFileReq)
      return this.equals((AddFileReq)that);
    return false;
  }

  public boolean equals(AddFileReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_user_id = true && this.isSetUser_id();
    boolean that_present_user_id = true && that.isSetUser_id();
    if (this_present_user_id || that_present_user_id) {
      if (!(this_present_user_id && that_present_user_id))
        return false;
      if (!this.user_id.equals(that.user_id))
        return false;
    }

    boolean this_present_file_path = true && this.isSetFile_path();
    boolean that_present_file_path = true && that.isSetFile_path();
    if (this_present_file_path || that_present_file_path) {
      if (!(this_present_file_path && that_present_file_path))
        return false;
      if (!this.file_path.equals(that.file_path))
        return false;
    }

    boolean this_present_digest = true && this.isSetDigest();
    boolean that_present_digest = true && that.isSetDigest();
    if (this_present_digest || that_present_digest) {
      if (!(this_present_digest && that_present_digest))
        return false;
      if (!this.digest.equals(that.digest))
        return false;
    }

    boolean this_present_buff = true && this.isSetBuff();
    boolean that_present_buff = true && that.isSetBuff();
    if (this_present_buff || that_present_buff) {
      if (!(this_present_buff && that_present_buff))
        return false;
      if (!this.buff.equals(that.buff))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUser_id()) ? 131071 : 524287);
    if (isSetUser_id())
      hashCode = hashCode * 8191 + user_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetFile_path()) ? 131071 : 524287);
    if (isSetFile_path())
      hashCode = hashCode * 8191 + file_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetDigest()) ? 131071 : 524287);
    if (isSetDigest())
      hashCode = hashCode * 8191 + digest.hashCode();

    hashCode = hashCode * 8191 + ((isSetBuff()) ? 131071 : 524287);
    if (isSetBuff())
      hashCode = hashCode * 8191 + buff.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AddFileReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUser_id(), other.isSetUser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_path(), other.isSetFile_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_path, other.file_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDigest(), other.isSetDigest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDigest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.digest, other.digest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBuff(), other.isSetBuff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buff, other.buff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AddFileReq(");
    boolean first = true;

    sb.append("user_id:");
    if (this.user_id == null) {
      sb.append("null");
    } else {
      sb.append(this.user_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("file_path:");
    if (this.file_path == null) {
      sb.append("null");
    } else {
      sb.append(this.file_path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("digest:");
    if (this.digest == null) {
      sb.append("null");
    } else {
      sb.append(this.digest);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buff:");
    if (this.buff == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.buff, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AddFileReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AddFileReqStandardScheme getScheme() {
      return new AddFileReqStandardScheme();
    }
  }

  private static class AddFileReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<AddFileReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AddFileReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_id = iprot.readString();
              struct.setUser_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_path = iprot.readString();
              struct.setFile_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DIGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.digest = iprot.readString();
              struct.setDigestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // BUFF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buff = iprot.readBinary();
              struct.setBuffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AddFileReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.user_id != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.user_id);
        oprot.writeFieldEnd();
      }
      if (struct.file_path != null) {
        oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
        oprot.writeString(struct.file_path);
        oprot.writeFieldEnd();
      }
      if (struct.digest != null) {
        oprot.writeFieldBegin(DIGEST_FIELD_DESC);
        oprot.writeString(struct.digest);
        oprot.writeFieldEnd();
      }
      if (struct.buff != null) {
        oprot.writeFieldBegin(BUFF_FIELD_DESC);
        oprot.writeBinary(struct.buff);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AddFileReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AddFileReqTupleScheme getScheme() {
      return new AddFileReqTupleScheme();
    }
  }

  private static class AddFileReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<AddFileReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AddFileReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUser_id()) {
        optionals.set(0);
      }
      if (struct.isSetFile_path()) {
        optionals.set(1);
      }
      if (struct.isSetDigest()) {
        optionals.set(2);
      }
      if (struct.isSetBuff()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUser_id()) {
        oprot.writeString(struct.user_id);
      }
      if (struct.isSetFile_path()) {
        oprot.writeString(struct.file_path);
      }
      if (struct.isSetDigest()) {
        oprot.writeString(struct.digest);
      }
      if (struct.isSetBuff()) {
        oprot.writeBinary(struct.buff);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AddFileReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.user_id = iprot.readString();
        struct.setUser_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.file_path = iprot.readString();
        struct.setFile_pathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.digest = iprot.readString();
        struct.setDigestIsSet(true);
      }
      if (incoming.get(3)) {
        struct.buff = iprot.readBinary();
        struct.setBuffIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

